# Conversión de números decimales a binarios
n = float(input('\nIngrese el número que desea convertir a binario: '))
N = n
if n > 0:
    n = n
else:
    n = -n
# Separación de la parte entera de la parte decimal
pent = int(n // 1)
pdec = n % 1
# Definiciones
k = []
g = []
# Conversión de parte entera a binario
while pent > 0:
    a = int(float(pent % 2))
    k.append(a)
    pent = (pent - a) / 2
cadenae = ""
for j in k[::-1]:
    cadenae = cadenae + str(j)
cadenaen = cadenae
# Conversión de parte decimal a binario
while pdec > 0:
    b = int(float(pdec * 2))
    c = int(b // 1)
    d = n % 1
    g.append(c)
    pdec = (pdec * 2) - c
cadenad = ""
for i in g[::]:
    cadenad = cadenad + str(i)
    cadenad = cadenad[:10]
# Impresión de parte entera y decimal como binarios
print(f'\nEl número {N} en binario es:\n{cadenae}.{cadenad}')

# Conversión a Estándar IEEE 32 bits
# Obtención de ceros extra
cero = 8388608
ero = []
while cero > 0:
    e = int(float(cero % 2))
    ero.append(e)
    cero = (cero - e) / 2
cadenacer = ""
for j in ero[::-1]:
    cadenacer = cadenacer + str(j)
cadenacero = cadenacer[:23]
# Signo
if N > 0:
    signo = 0
else:
    signo = 1
# Exponente
cero = (len(cadenae) - 1) + 127
ero = []
while cero > 0:
    e = int(float(cero % 2))
    ero.append(e)
    cero = (cero - e) / 2
cadenacer = ""
for j in ero[::-1]:
    cadenacer = cadenacer + str(j)
cadenaexpm = cadenacer + cadenacero[1:]
cadenaexp0 = cadenaexpm[:8]
# Mantisa
cadenaed = (cadenaen[1:] + cadenad) + cadenacero[1:]
cadenaeyd = cadenaed[:23]
# Impresión de la representación
print(f'\nLa representación IEEE 754 de 32 bits del número {N} es:'
      f'\n{signo}|{cadenaexp0}|{cadenaeyd}')
